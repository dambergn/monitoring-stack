// config.alloy

logging {
	level  = "debug" // Set to "info" for less verbose logs once stable
	format = "logfmt"
}

// =================================================================
// METRICS CONFIGURATION
// =================================================================

// Alloy exposes its internal metrics on port 8080 by default.
prometheus.scrape "alloy_internal_metrics" {
  targets    = [{__address__ = "127.0.0.1:8080", __metrics_path__ = "/metrics"}]
  forward_to = [prometheus.remote_write.prometheus_prom_write.receiver]
}

// Configure a remote_write component to send metrics to Prometheus.
prometheus.remote_write "prometheus_prom_write" {
	endpoint {
		url = "http://prometheus:9090/api/v1/write"
	}
}

// Scrape Node Exporter for system metrics
prometheus.scrape "node_exporter_metrics" {
  targets    = [{__address__ = "node-exporter:9100"}]
  forward_to = [prometheus.remote_write.prometheus_prom_write.receiver]
}


// =================================================================
// LOGS CONFIGURATION
// =================================================================

// Define the final destination for ALL logs on your specified port.
loki.write "default" {
	endpoint {
		url = "http://loki:3200/loki/api/v1/push"
	}
}

// STEP 1: Discover all running Docker containers.
discovery.docker "all_containers" {
  host = "unix:///var/run/docker.sock"
}

// STEP 2: Scrape logs from the discovered containers using the correct component.
loki.source.docker "docker_logs" {
  // Wire the targets from the discovery block above.
  targets    = discovery.docker.all_containers.targets
  // Send the scraped logs to our Loki destination.
  forward_to = [loki.write.default.receiver]

  // THIS IS THE CORRECT SYNTAX.
  // The relabeling config is a block directly inside the source component.
  relabel_configs {
    // Rule to create a clean 'container' label.
    rule {
      source_labels = ["__meta_docker_container_name"]
      regex         = "/(.*)"
      target_label  = "container"
    }
    // Rule to add a 'job' label for easy filtering in Grafana.
    rule {
      replacement  = "docker"
      target_label = "job"
    }
  }
}