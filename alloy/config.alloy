// config.alloy

logging {
	level  = "debug" // Set to "info" for less verbose logs once stable
	format = "logfmt"
}

// =================================================================
// METRICS CONFIGURATION
// =================================================================

// Alloy exposes its internal metrics on port 8080 by default.
prometheus.scrape "alloy_internal_metrics" {
  targets    = [{__address__ = "127.0.0.1:8080", __metrics_path__ = "/metrics"}]
  forward_to = [prometheus.remote_write.prometheus_prom_write.receiver]
}

// Configure a remote_write component to send metrics to Prometheus.
prometheus.remote_write "prometheus_prom_write" {
	endpoint {
		url = "http://prometheus:9090/api/v1/write"
	}
}

// Scrape Node Exporter for system metrics
prometheus.scrape "node_exporter_metrics" {
  targets    = [{__address__ = "node-exporter:9100"}]
  forward_to = [prometheus.remote_write.prometheus_prom_write.receiver]
}


// =================================================================
// LOGS CONFIGURATION
// =================================================================

// Define the final destination for our logs on the correct port.
loki.write "default" {
	endpoint {
		url = "http://loki:3200/loki/api/v1/push" // <-- CORRECTED PORT
	}
}

// --- Pipeline for HOST system logs ---

// STEP 1.1: Discover log files on the host.
discovery.file "system_log_files" {
  path_targets = [{
    "__path__" = "/var/log/**/*.log",
  }]
}

// STEP 1.2: Scrape the discovered files and send them DIRECTLY to Loki.
// (No processing needed for this simple case).
loki.source.file "system_logs" {
  targets    = discovery.file.system_log_files.targets
  forward_to = [loki.write.default.receiver]
}


// --- Pipeline for DOCKER container logs ---

// STEP 2.1: Scrape all Docker container logs.
// This source sends logs to a PROCESSING stage, not directly to Loki.
loki.source.docker "container_logs" {
  host       = "unix:///var/run/docker.sock"
  forward_to = [loki.process.docker_relabel.receiver] // <-- Forwards to the processing block
}

// STEP 2.2: Process the logs to add a clean 'container' label.
// THIS IS THE CORRECT WAY TO RELABEL.
loki.process "docker_relabel" {
  // Use a relabel stage to transform the internal __meta_docker label.
  stage.relabel {
    rules {
      source_labels = ["__meta_docker_container_name"]
      regex         = "/(.*)" // Captures the full container name without the leading slash
      target_label  = "container"
    }
  }

  // After processing, forward the final log entry to Loki.
  forward_to = [loki.write.default.receiver]
}